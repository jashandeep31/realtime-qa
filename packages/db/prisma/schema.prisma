// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String  @id @default(cuid())
  email  String  @unique
  name   String?
  avatar String?
  role   Role    @default(USER)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  blocked   Boolean     @default(false)
  LiveClass LiveClass[]
  Showcase  Showcase[]
}

enum Role {
  USER
  ADMIN
}

// liveclass name is used instead of class to avoid reserved keyword
model LiveClass {
  id          String  @id @default(cuid())
  name        String
  description String
  expired     Boolean @default(false)

  userId   String
  creartor User   @relation(fields: [userId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Resource  Resource?
  Showcase  Showcase[]
}

model Resource {
  id     String @id @default(cuid())
  detail String

  liveClass   LiveClass @relation(fields: [liveClassId], references: [id])
  liveClassId String    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id           String  @id @default(cuid())
  title        String
  description  String
  upvote       Int     @default(0)
  downvote     Int     @default(0)
  deleted      Boolean @default(false)
  answered     Boolean @default(false)
  markForLater Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Answer    Answer[]
}

model Answer {
  id     String @id @default(cuid())
  detial String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  isAnswer   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Showcase {
  id String @id @default(cuid())

  title       String
  description String

  user        User      @relation(fields: [userId], references: [id])
  userId      String
  liveClass   LiveClass @relation(fields: [liveClassId], references: [id])
  liveClassId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
